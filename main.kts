/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
// https://projecteuler.net/problem=2
fun swapin(target : IntArray, arrow: Int){
    target[0] = target[1]
    target[1] = arrow
}
fun problem2() {

    var total = 0
    var terms = intArrayOf(1, 2)
    do {
        if(terms[0] % 2 == 0) total += terms[0]
        swapin(terms, terms.sum())
    } while (terms[1] < 4000000)
    println("Problem 2: $terms : $total")
}
problem2()

// https://projecteuler.net/problem=1
fun problem1() {
    var x = 0
    val r = generateSequence {
        (listOf(++x * 3, x * 5)).takeIf { x * 3 < 1000 }
    }.toList().flatten().filter { it < 1000 }.sorted().toSet().sum()
    println("Problem 1: $r")
}
problem1()
